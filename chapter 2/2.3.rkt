#lang racket
(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (make-segment start end)
  (cons start end))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (f-average f x y)
  (/ (+ (f x) (f y)) 2))
(define x (make-point 3 2))
(define y (make-point -2 -2))
(define l (make-segment x y))
(define (perimeter-rectangle r)
  (let ((length (length-of-rectangle r))
        (width (width-of-rectangle r)))
    (* 2
       (+ length width))))
(define (area-rectangle r)
  (let ((length (length-of-rectangle r))
        (width (width-of-rectangle r)))
    (* length width)))
(define (make-rectangle length width)
  (cons length width))
(define (length-rectangle r)
  (car r))
(define (width-rectangle r)
  (cdr r))
(define (f-difference f x y)
  (- (f x) (f y)))
(define (length-of-rectangle r)
  (let ((length (length-rectangle r)))
  (f-difference x-point (end-segment length) (start-segment length))))
(define (width-of-rectangle r)
  (let ((width (width-rectangle r)))
    (f-difference y-point (end-segment width) (start-segment width))))

(define length (make-segment (make-point 1 2)
                              (make-point 4 2)))
 (define width (make-segment (make-point 1 2)
                              (make-point 1 4)))
(define r (make-rectangle length width))
(perimeter-rectangle r)
(area-rectangle r)