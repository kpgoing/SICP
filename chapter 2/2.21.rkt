#lang racket
(define (square x)
  (* x x))
(define (map proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
            (map proc (cdr items)))))
(define (square-list list)
  (map square list))
(square-list '(1 2 3))
(define (square-list2 list)
  (if (null? list)
      '()
      (cons (square (car list)) (square-list2 (cdr list)))))
(square-list '(1 2 3))