#lang racket
(define (cont-frac2 n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1)
              (/ (n i)
                 (+ (d i) result)))))
  (iter (- k 1)
        (/ (n k) (d k))))
(define (// m n)
  (if (> m n)(/ (- m (remainder m n)) n)
      0))
(define (g k)
  (cond ((= k 1) 1)
        ((= (remainder (- k 1) 3) 1) (+ 2 (* (// k 3) 2)))
        (else 1)))
(+ 2 (cont-frac2 (lambda (i) 1.0)
           g
          100000))
(define (ad a b)
  (display (g a))
  (newline)
  (if (< a b)
      (ad (+ a 1) b)
      0)
  )